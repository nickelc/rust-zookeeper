var searchIndex = JSON.parse('{\
"zookeeper":{"doc":"","i":[[3,"Permission","zookeeper","Describes the ability of a user to perform a certain action.",null,null],[3,"Acl","","An access control list.",null,null],[12,"perms","","The permissions associated with this ACL.",0,null],[12,"scheme","","The authentication scheme this list is used for. The most…",0,null],[12,"id","","The ID of the user under the `scheme`. For example, with…",0,null],[3,"Stat","","Statistics about a znode, similar to the UNIX `stat`…",null,null],[12,"czxid","","The transaction ID that created the znode.",1,null],[12,"mzxid","","The last transaction that modified the znode.",1,null],[12,"ctime","","Milliseconds since epoch when the znode was created.",1,null],[12,"mtime","","Milliseconds since epoch when the znode was last modified.",1,null],[12,"version","","The number of changes to the data of the znode.",1,null],[12,"cversion","","The number of changes to the children of the znode.",1,null],[12,"aversion","","The number of changes to the ACL of the znode.",1,null],[12,"ephemeral_owner","","The session ID of the owner of this znode, if it is an…",1,null],[12,"data_length","","The length of the data field of the znode.",1,null],[12,"num_children","","The number of children this znode has.",1,null],[12,"pzxid","","The transaction ID that last modified the children of the…",1,null],[3,"ZooKeeper","","The client interface for interacting with a ZooKeeper…",null,null],[3,"Watch","","An object watching a path for certain changes.",null,null],[12,"path","","The path to the znode this is watching.",2,null],[12,"watch_type","","The type of changes this watch is looking for.",2,null],[12,"watcher","","The handler for this watch, to call when it is triggered.",2,null],[3,"WatchedEvent","","Represents a change on the ZooKeeper that a `Watcher` is…",null,null],[12,"event_type","","The trigger that caused the watch to hit.",3,null],[12,"keeper_state","","The current state of ZooKeeper (and the client\'s…",3,null],[12,"path","","The path of the znode that was involved. This will be…",3,null],[3,"Subscription","","A unique identifier returned by `ZooKeeper::add_listener`.",null,null],[4,"ZkError","","Basic type for errors returned from the server.",null,null],[13,"APIError","","This code is never returned from the server. It should not…",4,null],[13,"AuthFailed","","Client authentication failed.",4,null],[13,"BadArguments","","Invalid arguments.",4,null],[13,"BadVersion","","Version conflict in `set` operation. In case of…",4,null],[13,"ConnectionLoss","","Connection to the server has been lost.",4,null],[13,"DataInconsistency","","A data inconsistency was found.",4,null],[13,"EphemeralOnLocalSession","","Attempt to create ephemeral node on a local session.",4,null],[13,"InvalidACL","","Invalid `Acl` specified.",4,null],[13,"InvalidCallback","","Invalid callback specified.",4,null],[13,"MarshallingError","","Error while marshalling or unmarshalling data.",4,null],[13,"NoAuth","","Not authenticated.",4,null],[13,"NoChildrenForEphemerals","","Ephemeral nodes may not have children.",4,null],[13,"NodeExists","","Request to create node that already exists.",4,null],[13,"NoNode","","Attempted to read a node that does not exist.",4,null],[13,"NotEmpty","","The node has children.",4,null],[13,"NotReadOnly","","State-changing request is passed to read-only server.",4,null],[13,"NoWatcher","","Attempt to remove a non-existing watcher.",4,null],[13,"OperationTimeout","","Operation timeout.",4,null],[13,"RuntimeInconsistency","","A runtime inconsistency was found.",4,null],[13,"SessionExpired","","The session has been expired by the server.",4,null],[13,"SessionMoved","","Session moved to another server, so operation is ignored.",4,null],[13,"SystemError","","System and server-side errors. This is never thrown by the…",4,null],[13,"Unimplemented","","Operation is unimplemented.",4,null],[4,"CreateMode","","CreateMode value determines how the znode is created on…",null,null],[13,"Persistent","","The znode will not be automatically deleted upon client\'s…",5,null],[13,"Ephemeral","","The znode will be deleted upon the client\'s disconnect.",5,null],[13,"PersistentSequential","","The name of the znode will be appended with a…",5,null],[13,"EphemeralSequential","","The znode will be deleted upon the client\'s disconnect,…",5,null],[13,"Container","","Container nodes are special purpose nodes useful for…",5,null],[4,"KeeperState","","Enumeration of states the client may be at a Watcher…",null,null],[13,"Disconnected","","The client is in the disconnected state - it is not…",6,null],[13,"SyncConnected","","The client is in the connected state - it is connected to…",6,null],[13,"AuthFailed","","Authentication has failed -- connection requires a new…",6,null],[13,"ConnectedReadOnly","","The client is connected to a read-only server, that is the…",6,null],[13,"SaslAuthenticated","","Used to notify clients that they are SASL-authenticated,…",6,null],[13,"Expired","","The serving cluster has expired this session. The…",6,null],[4,"WatchedEventType","","Enumeration of types of events that may occur on the znode.",null,null],[13,"None","","Nothing known has occurred on the znode. This value is…",7,null],[13,"NodeCreated","","Issued when a znode at a given path is created.",7,null],[13,"NodeDeleted","","Issued when a znode at a given path is deleted.",7,null],[13,"NodeDataChanged","","Issued when the data of a watched znode are altered. This…",7,null],[13,"NodeChildrenChanged","","Issued when the children of a watched znode are created or…",7,null],[13,"DataWatchRemoved","","Issued when the client removes a data watcher.",7,null],[13,"ChildWatchRemoved","","Issued when the client removes a child watcher.",7,null],[4,"ZkState","","Enumeration of states the client may be at any time.",null,null],[13,"Associating","","Previously used to represent a state between connection…",8,null],[13,"AuthFailed","","Authentication has failed. Operations will return…",8,null],[13,"Closed","","The session has ended. Operations will return…",8,null],[13,"Connected","","Session has been fully established. Operations will…",8,null],[13,"ConnectedReadOnly","","Connected to a read-only server. See…",8,null],[13,"Connecting","","Currently attempting to connect with an ensemble member.…",8,null],[13,"NotConnected","","Theoretically used as a special state to represent…",8,null],[4,"WatchType","","Describes what a `Watch` is looking for.",null,null],[13,"Child","","Watching for changes to children.",9,null],[13,"Data","","Watching for changes to data.",9,null],[13,"Exist","","Watching for the creation of a node at the given path.",9,null],[18,"NONE","","No permissions are set (server could have been configured…",10,null],[18,"READ","","You can access the data of a node and can list its children.",10,null],[18,"WRITE","","You can set the data of a node.",10,null],[18,"CREATE","","You can create a child node.",10,null],[18,"DELETE","","You can delete a child node (but not necessarily this one).",10,null],[18,"ADMIN","","You can alter permissions on this node.",10,null],[18,"ALL","","You can do anything.",10,null],[11,"can","","Check that all `permissions` are set.",10,[[["permission",3]]]],[11,"new","","Create a new ACL with the given `permissions`, `scheme`,…",0,[[["permission",3]],["acl",3]]],[11,"creator_all","","This ACL gives the creators authentication id\'s all…",0,[[],["vec",3]]],[11,"open_unsafe","","This is a completely open ACL.",0,[[],["vec",3]]],[11,"read_unsafe","","This ACL gives the world the ability to read.",0,[[],["vec",3]]],[11,"is_ephemeral","","Is the znode an ephemeral entry?",1,[[]]],[11,"connect","","Connect to a ZooKeeper cluster.",11,[[["duration",3]],[["zookeeper",3],["zkresult",6]]]],[11,"add_auth","","Add the specified `scheme`:`auth` information to this…",11,[[["vec",3],["tostring",8]],["zkresult",6]]],[11,"create","","Create a node with the given `path`. The node data will be…",11,[[["vec",3],["acl",3],["createmode",4],["vec",3]],[["zkresult",6],["string",3]]]],[11,"delete","","Delete the node with the given `path`. The call will…",11,[[["option",4]],["zkresult",6]]],[11,"exists","","Return the `Stat` of the node of the given `path` or…",11,[[],[["zkresult",6],["option",4]]]],[11,"exists_w","","Return the `Stat` of the node of the given `path` or…",11,[[["watcher",8]],[["zkresult",6],["option",4]]]],[11,"get_acl","","Return the ACL and `Stat` of the node of the given path.",11,[[],["zkresult",6]]],[11,"set_acl","","Set the ACL for the node of the given path if such a node…",11,[[["vec",3],["acl",3],["option",4]],[["stat",3],["zkresult",6]]]],[11,"get_children","","Return the list of the children of the node of the given…",11,[[],[["vec",3],["zkresult",6]]]],[11,"get_children_w","","Return the list of the children of the node of the given…",11,[[["watcher",8]],[["vec",3],["zkresult",6]]]],[11,"get_data","","Return the data and the `Stat` of the node of the given…",11,[[],["zkresult",6]]],[11,"get_data_w","","Return the data and the `Stat` of the node of the given…",11,[[["watcher",8]],["zkresult",6]]],[11,"set_data","","Set the data for the node of the given `path` if such a…",11,[[["vec",3],["option",4]],[["stat",3],["zkresult",6]]]],[11,"add_listener","","Adds a state change `Listener`, which will be notified of…",11,[[["send",8],["fn",8]],["subscription",3]]],[11,"remove_listener","","Removes a state change `Listener` and closes the channel.",11,[[["subscription",3]]]],[11,"close","","Close this client object. Once the client is closed, its…",11,[[],["zkresult",6]]],[0,"recipes","","Extended ZooKeeper recipes from Apache Curator.",null,null],[0,"cache","zookeeper::recipes","Caching mechanisms.",null,null],[3,"PathChildrenCache","zookeeper::recipes::cache","A Path Cache is used to watch a znode.",null,null],[4,"PathChildrenCacheEvent","","",null,null],[13,"Initialized","","",12,null],[13,"ConnectionSuspended","","",12,null],[13,"ConnectionLost","","",12,null],[13,"ConnectionReconnected","","",12,null],[13,"ChildRemoved","","",12,null],[13,"ChildAdded","","",12,null],[13,"ChildUpdated","","",12,null],[6,"ChildData","","Data contents of a znode and associated `Stat`.",null,null],[6,"Data","","Data for all known children of a znode.",null,null],[11,"new","","Create a new cache instance watching `path`. If `path`…",13,[[["zookeeper",3],["arc",3]],[["pathchildrencache",3],["zkresult",6]]]],[11,"get_current_data","","Return the current data. There are no guarantees of…",13,[[],["data",6]]],[11,"clear","","",13,[[]]],[11,"start","","Start the cache. The cache is not started automatically.…",13,[[],["zkresult",6]]],[11,"add_listener","","",13,[[["send",8],["fn",8]],["subscription",3]]],[11,"remove_listener","","",13,[[["subscription",3]]]],[0,"leader","zookeeper::recipes","",null,null],[3,"LeaderLatch","zookeeper::recipes::leader","",null,null],[11,"new","","",14,[[["string",3],["arc",3],["zookeeper",3]]]],[11,"start","","",14,[[],["zkresult",6]]],[11,"stop","","",14,[[],["zkresult",6]]],[11,"id","","",14,[[]]],[11,"path","","",14,[[],[["option",4],["string",3]]]],[11,"has_leadership","","",14,[[]]],[6,"ZkResult","zookeeper","Value returned from potentially-error operations.",null,null],[8,"ZooKeeperExt","","Extended ZooKeeper operations that are not needed for the…",null,null],[10,"ensure_path","","Ensure that `path` exists and create all potential paths…",15,[[],["zkresult",6]]],[10,"get_children_recursive","","Performs a breadth-first tree traversal of the tree…",15,[[],[["vec",3],["zkresult",6]]]],[10,"delete_recursive","","Deletes the node at `path` and all its children. NOTE:…",15,[[],["zkresult",6]]],[8,"Watcher","","The interface for handling events when a `Watch` triggers.",null,null],[10,"handle","","Receive the triggered event.",16,[[["watchedevent",3]]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","zookeeper::recipes::cache","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","zookeeper::recipes::leader","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"ensure_path","zookeeper","",11,[[],["zkresult",6]]],[11,"get_children_recursive","","",11,[[],[["vec",3],["zkresult",6]]]],[11,"delete_recursive","","",11,[[],["zkresult",6]]],[11,"drop","","",11,[[]]],[11,"from","","",4,[[],["zkerror",4]]],[11,"from","","",6,[[],["keeperstate",4]]],[11,"from","","",7,[[],["watchedeventtype",4]]],[11,"clone","","",10,[[],["permission",3]]],[11,"clone","","",0,[[],["acl",3]]],[11,"clone","","",4,[[],["zkerror",4]]],[11,"clone","","",5,[[],["createmode",4]]],[11,"clone","","",6,[[],["keeperstate",4]]],[11,"clone","","",7,[[],["watchedeventtype",4]]],[11,"clone","","",8,[[],["zkstate",4]]],[11,"clone","","",17,[[],["subscription",3]]],[11,"clone","","",3,[[],["watchedevent",3]]],[11,"clone","zookeeper::recipes::cache","",12,[[],["pathchildrencacheevent",4]]],[11,"clone","zookeeper::recipes::leader","",14,[[],["leaderlatch",3]]],[11,"eq","zookeeper","",10,[[["permission",3]]]],[11,"ne","","",10,[[["permission",3]]]],[11,"eq","","",0,[[["acl",3]]]],[11,"ne","","",0,[[["acl",3]]]],[11,"eq","","",4,[[["zkerror",4]]]],[11,"eq","","",5,[[["createmode",4]]]],[11,"eq","","",6,[[["keeperstate",4]]]],[11,"eq","","",8,[[["zkstate",4]]]],[11,"eq","","",17,[[["subscription",3]]]],[11,"ne","","",17,[[["subscription",3]]]],[11,"eq","","",9,[[["watchtype",4]]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","zookeeper::recipes::cache","",12,[[["formatter",3]],["result",6]]],[11,"fmt","zookeeper","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"bitand","","",10,[[]]],[11,"bitor","","",10,[[]]],[11,"hash","","",17,[[]]],[11,"description","","",4,[[]]]],"p":[[3,"Acl"],[3,"Stat"],[3,"Watch"],[3,"WatchedEvent"],[4,"ZkError"],[4,"CreateMode"],[4,"KeeperState"],[4,"WatchedEventType"],[4,"ZkState"],[4,"WatchType"],[3,"Permission"],[3,"ZooKeeper"],[4,"PathChildrenCacheEvent"],[3,"PathChildrenCache"],[3,"LeaderLatch"],[8,"ZooKeeperExt"],[8,"Watcher"],[3,"Subscription"]]},\
"zookeeper_derive":{"doc":"","i":[[24,"EnumDisplay","zookeeper_derive","Emit an `std::fmt::Display` implementation for an enum type.",null,null],[24,"EnumError","","Emit an `std::error::Error` implementation for an enum…",null,null],[24,"EnumConvertFromInt","","Emit an `std::convert::From<i32>` implementation for an…",null,null]],"p":[]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);